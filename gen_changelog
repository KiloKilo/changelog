#!/usr/bin/env ruby
#
# Generate a changelog.md from the entry files
# https://gitlab.com/gitlab-org/release-tools/tree/1ccd1159a62b75d7e011fcff1ba374286050161a/lib/release_tools/changelog

require 'optparse'
require 'yaml'
require 'fileutils'

Options = Struct.new(:changelog_file) do 
    def initialize(*)
        super
        self.changelog_file ||= 'CHANGELOG.md'
    end
end

module GenChangelogHelpers
  Abort = Class.new(StandardError)
  Done = Class.new(StandardError)

  MAX_FILENAME_LENGTH = 140 # ecryptfs has a limit of 140 characters

  def capture_stdout(cmd)
    output = IO.popen(cmd, &:read)
    fail_with "command failed: #{cmd.join(' ')}" unless $?.success?
    output
  end

  def fail_with(message)
    raise Abort, "\e[31merror\e[0m #{message}"
  end
end

class GenChangelogOptionParser
    extend GenChangelogHelpers

    class << self
        def parse(argv) 
            options = Options.new

            parser = OptionParser.new do |opts|
                opts.banner = "Usage: #{__FILE__} [options]\n\n"

                opts.on('-c', '--changelog_file [string]', String, "The name of the changelog file") do |value|
                    options.changelog_file = value
                end

                opts.on('-h', '--help', 'Print help message') do
                    $stdout.puts opts
                    raise Done.new
                end
            end

            parser.parse!(argv)

            options
        end
    end

end

class GenChangelog
    include GenChangelogHelpers

    attr_reader :options
    
    def initialize(options)
        @options = options
    end

    def execute
        update_changelog
    end

    private

    def update_changelog

    end

end






if $0 == __FILE__
  begin
    options = GenChangelogOptionParser.parse(ARGV)
    GenChangelog.new(options).execute
  rescue GenChangelogHelpers::Abort => ex
    $stderr.puts ex.message
    exit 1
  rescue GenChangelogHelpers::Done
    exit
  end
end


# vim: ft=ruby
