#!/usr/bin/env ruby
#
# Generate a changelog.md from the entry files
# https://gitlab.com/gitlab-org/release-tools/tree/1ccd1159a62b75d7e011fcff1ba374286050161a/lib/release_tools/changelog

require 'optparse'
require 'yaml'
require 'fileutils'

Options = Struct.new(
  :changelog_file,
  :include_date
  ) do 
    def initialize(*)
        super
        self.changelog_file ||= 'CHANGELOG.md'
    end
end

module GenChangelogHelpers
  Abort = Class.new(StandardError)
  Done = Class.new(StandardError)

  MAX_FILENAME_LENGTH = 140 # ecryptfs has a limit of 140 characters

  def capture_stdout(cmd)
    output = IO.popen(cmd, &:read)
    fail_with "command failed: #{cmd.join(' ')}" unless $?.success?
    output
  end

  def fail_with(message)
    raise Abort, "\e[31merror\e[0m #{message}"
  end
end

class GenChangelogOptionParser
    extend GenChangelogHelpers

    class << self
        def parse(argv) 
            options = Options.new

            parser = OptionParser.new do |opts|
                opts.banner = "Usage: #{__FILE__} [options]\n\n"

                opts.on('-c', '--changelog_file [string]', String, "The name of the changelog file") do |value|
                    options.changelog_file = value
                end

                opts.on('-d', '--include-data', "Include the date in the release") do |value|
                  options.include_date = true if value
                end

                opts.on('-h', '--help', 'Print help message') do
                    $stdout.puts opts
                    raise Done.new
                end
            end

            parser.parse!(argv)

            options
        end
    end

end

class GenChangelog
    include GenChangelogHelpers

    attr_reader :options
    
    def initialize(options)
        @options = options
    end

    def execute
        update_changelog
    end

    private

    def update_changelog
      markdown = MarkdownGenerator.new(version, unreleased_entries, include_date: options.include_date).to_s
    end

    def unreleased_path
      File.join('changelogs', 'unreleased')
    end
end

class MarkdownGgenerator
  attr_reader :version, :entries

  def initialize(version, entries, include_date: false)
    @version = version
    @entries = entries.select(&:valid?)
    @include_date = include_date
  end

  def to_s
    markdown = StringIO.new
    markdown.puts header
    markdown.puts

    if entries.empty?
      markdown.puts "- No changes."
    else
      markdown.puts formatted_entries
    end

    markdown.puts

    markdown.string
  end

  private

  def header
    head = "## #{version.to_patch}"
    head += " (#{date})" if @include_date
    head
  end

  def date
    Date.today.strftime("%Y-%m-%d")
  end

  # Group entries by type found in the `Changelog::Entry::TYPES`.
  # Output example:
  #
  # ### Fixed (52 changes)
  # - Fix 404 errors in API caused when the branch name had a dot. #42 !14462 (ajoly)
  def formatted_entries
    result = +''

    Changelog::Entry::TYPES.each do |type|
      grouped_entries = entries_grouped_by_type(type)
      changes_count = grouped_entries.size

      # Do nothing if no changes are presented for the current type.
      next unless changes_count.positive?

      community_entries_count = entries_from_community(grouped_entries).size

      # Prepare the group header.
      # Example:
      # ### Added (54 changes)
      changes = [changes_count, 'change'.pluralize(changes_count)].join("\s")

      if community_entries_count.positive?
        verb = community_entries_count > 1 ? 'are' : 'is'
        changes << ", #{community_entries_count} of them #{verb} from the community"
      end

      result << "### #{type.capitalize} (#{changes})\n\n"

      # Add entries to the group.
      grouped_entries.each { |entry| result << "- #{entry}\n" }

      result << "\n"
    end

    result
  end




end





if $0 == __FILE__
  begin
    options = GenChangelogOptionParser.parse(ARGV)
    GenChangelog.new(options).execute
  rescue GenChangelogHelpers::Abort => ex
    $stderr.puts ex.message
    exit 1
  rescue GenChangelogHelpers::Done
    exit
  end
end


# vim: ft=ruby
